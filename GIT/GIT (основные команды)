GIT  
git-scm.com
gitkraken.com

(настройка GIT)
git config --global user.name "[name]"
git config --global user.email "[email address]"
git config --global color.ui auto
git config --global core.editor "[programm]"
git config --list
git config --global core.quotepath off


(основные команды)
ls  = list просмотр содержимого папки
mkdir [имя папки] = создание папки
touch [имя файла] = создание файла
cp [имя файла] [имя файла] = копирование файла 
mv [имя файла] [имя файла] = переименование и перемещение файла
echo "text" > [имя файла] = запись текста в файл
cat [имя файла] = вывод содержимого файла
rm [имя файла] = удаление файла 
rm -R [имя папки] = удаление папки

(Работа с репозиториями)
git init = инициализация репозитория в папке
ls -a = покажет все папки в том числе скрытые
git status = текущее состояние репозитория
$ git remote add origin [ссылка на github] = связь репозитория на компьютере с репозиторием на github
git remote -v = список подключенных репозиториев


(Управление файлами репозитория)
git add [имя файла] = добавление файла в репозиторий
git rm --cached [имя файла] = удаление файла из коммита
git commit = создание коммита
git commit -m 'comming message' = записать коммит с сообщением
git restore [имя файла] = отмена на предыдущего коммита
git commit -a  = git add [имя файла] git commit
git commit -am 'message'

.gitkeep [images/ storage/] = сохраняет пустые директории в общем репозитории
.gitiqnore [.env temp/* cache/*] = для игнорирования каких-то файлов в общий репозиторий
 touch images/.gitkeep
 echo "config">.gitiqnore = правила игнорирования названия файла от коммита

 (история изменений)
 git log = просмотр истории коммитов
 git log --oneline = краткий вывод истории
 git log --oneline --all = краткий вывод истории на всех ветках
 git reset [хеш коммита] = сброс текущего состояния истории
 git reflog = возврат к отмененному коммиту.История всех операций в репозитории
 git revert [хэш коммита] = отменяет последствия того или иного коммита.Она не сбрасывает состояние репозитория.Она создает новый коммит который отменяет действия совершенного предыдущего коммита

 git restore [имя файла] = сброс состояния файла на указанное


(ветки основные манипуляции)

git branch = просмотр какие ветки доступны
git branch dev = создание новой ветки dev
git checkout dev = переключение на ветку dev
git branch dev-master master = находясь на ветке dev создаем новую ветку dev-master которая хранит изменения master ветки но нет ветки dev (head -> dev-master, master)
git checkout -b dev-test = одновременное переключение и создание новой ветки dev-test
git checkout -b [branch] [master] = одновременное создание и переключение branch от ветки master

(публикация репозитория)
git = генерация ssh ключа в gitbush.cat путь где лежит сгенерированный ключ скопировать и прописать в github

git clone [ssh-key] [имя папки куда clone]= клонирование репозитория с github на компьютер
git push = загружает обратно на удаленный репозиторий все изменения
git push -u origin dev = создание и загрузка на удаленный репозиторий (
так как на удаленном репозитории нет ветки dev)
git pull = загрузить с удаленного репозитория все измененния
git fetch = подгрузить обновление из репозитория

(слияние веток)


git merge dev = внесение всех изменений из ветки dev в ветку master.После нужно git push
git merge [branch1] [branch2] = слияние 2-х веток в ветку на которой вы находитесь в данный момент
git branch -d [имя ветки] [имя ветки] = удаление не актуальной ветки на локальном репозитории
git push --delete origin [имя ветки] [имя ветки] = удаление веток на удаленном репозитории
git rebase master = смещение текущей ветки на последний коммит ветки мастер(2>1 перейти на 1 и git rebase 2) 
git push --force = принудительно перезаписывает удаленную ветку на текущию

(управление версиями)
git tag 1.0.0 = установка номера версии
git tag = выведет номер версии
git --list = выведет все имеющие номера версий
git push --tags = загрузка номеров версий на удаленный репозиторий
git tag -d [номер версии] = удаление номера версии
git push --delete origin [номер версии] = удаление номера версии из удаленного репозитория

(создание pull-request)

(сложные операции)

git stash = времменое хранилище (Например не хочу коммитить но нужно сохранить эти изменения во временном хранилище при переходе на другую веткуstat) 
git stash list = покажет список stash
git stash push [имя файла] = добавить файл к уже существующему stash-у
git stash pop [#stash] = отменяет stash под номером #stash. Применяет изменения из stash
git merge [branch] --squash = подтягивает изменения с указанной ветки но не создает коммит. Перенос изменений через squash
git reset --hard = сбросит состояние репозитория на последний коммит
git rebase -i HEAD~[кол-во коммитов] = объединяет кол-во коммитов в один

git cherry-pick [#хеша] = подтянет только один коммит под #хеша на данную ветку
git cherry-pick [commit] = перенести коммит на текущию ветку
git cherry-pick [branch] = перенести последний коммит ветки
git cherry-pick .. [branch] = перенести все коммиты с ветки

git commit --amend = перезапись последнего коммита
vi [file] = откроет file через текстовый редактор

