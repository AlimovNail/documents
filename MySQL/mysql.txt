Первая нормальная форма (1NF) 

Основные критерии: 

* Все строки должны быть различными. 
* Все элементы внутри ячеек должны быть атомарными (не списками). Другими словами, элемент является атомарным, если его нельзя разделить на части, которые могут использовать в таблице независимо друг от друга.

Методы приведения к 1NF: 
* Устраните повторяющиеся группы в отдельных таблицах (одинаковые строки). 
* Создайте отдельную таблицу для каждого набора связанных данных. 
* Идентифицируйте каждый набор связанных данных с помощью первичного ключа (добавить уникальный id для каждой строки)

Вторая нормальная форма (2NF) 

Основные критерии: 
* Таблица должна находиться в первой нормальной форме. 
* Любое её поле, не входящее в состав первичного ключа, функционально полно зависит от первичного ключа. 

Ваша таблица приведена к первой нормальной форме и у нее установлен уникальный id для каждой строки, то она находится и во второй нормальной форме.

Методы приведения к 2NF: 

* Создайте отдельные таблицы для наборов значений, относящихся к нескольким записям 
* Свяжите эти таблицы с помощью внешнего ключа 

Третья нормальная форма (3NF) 

Основные критерии: 
* Таблица находится во второй нормальной форме. 
* Любой её не ключевой атрибут функционально зависит только от первичного ключа.

Проще говоря, второе правило требует выносить все не ключевые поля, содержимое которых может относиться к нескольким записям таблицы в отдельные таблицы.

Методы приведения к 3NF:
* Удаление полей не зависящих от ключа

(SQL - команда CREATE)

// Создает тему магазин
CREATE SCHEMA `shop` DEFAULT CHARACTER SET utf8 COLLATE utf8_bin ; 

// Создает таблицу категория с таблицами id,name,discount
CREATE TABLE `shop`.`category` (
  `id` INT NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `discount` TINYINT(3) NOT NULL,
  PRIMARY KEY (`id`));

// Добавляет столбец allies-name после столбца discount 
ALTER TABLE `shop`.`category` 
ADD COLUMN `allies-name` VARCHAR(128) NULL AFTER `discount`;

//Удаляет таблицу category
DROP TABLE `shop`.`category`;

// Удаляет тему shop
DROP DATABASE `shop`;

show databases;
use shop;
show tables;
show columns from category;

(SQL- команда INSERT)

INSERT INTO `shop`.`category` (`name`, `discount`) VALUES ('Женская одежда', '5');
INSERT INTO `shop`.`category` (`name`, `discount`) VALUES ('Мужская одежда', '0');
INSERT INTO `shop`.`category` (`name`, `discount`) VALUES ('Женская обувь', '10');
INSERT INTO `shop`.`category` (`name`, `discount`,`alies_name`) VALUES ('Мужская обувь', '15', 'man''s shoes');
INSERT INTO `shop`.`category` (`name`, `discount`) VALUES ('Шляпы', '0');
INSERT INTO `shop`.`brand` (`type`) VALUES ('MarcO''Polo');
INSERT INTO `shop`.`good_type` (`type`) VALUES ('Платье');

(SQL - команды SELECT и WHERE)

use shop;
SELECT * FROM category;
SELECT * FROM category WHERE id = 3;
SELECT * FROM category WHERE discount <> 0;
SELECT * FROM category WHERE discount > 5;
SELECT * FROM category WHERE (discount > 5) AND (discount < 15);
SELECT * FROM category WHERE (discount < 5) OR (discount >= 10);
SELECT * FROM category WHERE NOT (discount < 5);
SELECT * FROM category WHERE alias_name IS NOT NULL;
SELECT * FROM category WHERE alias_name IS NULL;
SELECT * FROM good_type WHERE type = 'Платье';

(SQL - команды DISTINCT,ORDER BY,LIMIT)

use shop;
SELECT name FROM category;
SELECT name, discount FROM category;
-- вывести все уникальные значения скидок --
SELECT DISTINCT discount FROM category;
-- вывести все категории товаров, и отсортировать их по размеру скидки -- 
SELECT * FROM category ORDER BY discount;  -- ASC;--
-- вывести все категории товаров, и отсортировать их по размеру скидки в обратном порядке--
SELECT * FROM category ORDER BY discount DESC;

-- вывести все категории товаров с ненулевой скидкой и отсортировать их по размеру скидки в обратном порядке -- 
SELECT * FROM category WHERE discount <> 0 ORDER BY discount DESC;

-- вывести первые 2 категории товара --
SELECT * FROM category WHERE id < 3;
SELECT * FROM category LIMIT 2;

-- вывести первые 2 категории товара со скидкой не равной 0 --
SELECT * FROM category  WHERE discount <> 0 LIMIT 2;

-- вывести название бренда c инентификаторм 3 -- 
SELECT * FROM brand WHERE id = 3;

-- вывести первые 2 типа товара -- 
SELECT * FROM good_type LIMIT 2;

-- получить все категории товаров со скидкой < 10% и отсортировать их по названию --
SELECT name, discount  FROM category  WHERE discount < 10 ORDER BY name;


